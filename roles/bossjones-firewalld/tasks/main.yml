---
- name: Copy firewall script into place.
  template:
    src: firewall.bash.j2
    dest: /etc/firewall.bash
    owner: root
    group: root
    mode: 0744
  # notify: restart firewall
  tags:
  - firewalld

- name: Install firewalld
  package: name=firewalld state=present
  tags:
  - firewalld

- name: Ensure firewalld is started and enabled at boot.
  service:
    name: firewalld
    state: started
    enabled: yes
  tags:
  - firewalld

# NOTE: This playbook *adds* rules.
# It does not delete existing rules.

# Strategy:
# Make public the default policy.
- name: Set public as default policy
  command: firewall-cmd --set-default-zone=public

# https://github.com/ansible/ansible-modules-extras/issues/1282
- name: Install Ansible Python 2 Dependencies
  with_items:
  - python-firewall
  dnf:
    name: "{{item}}"
    state: present

# fatal: [default]: FAILED! => {"changed": false, "failed": true, "msg": "can only operate on port, service, rich_rule or interface at once"}

- name: disable global port 22
  firewalld:
    port: 22/tcp
    # service: ssh
    zone: public
    permanent: true
    state: disabled
  tags:
  - firewalld

- name: disable global service ssh
  firewalld:
    # port: 22/tcp
    service: ssh
    zone: public
    permanent: true
    state: disabled
  tags:
  - firewalld


# add drop rule for ipv6
# ::/0 â€” The default route address (corresponding to 0.0.0.0/0 in IPv4) covering all addresses (unicast, multicast and others).
- name: add drop rule for ipv6
  firewalld:
    rich_rule: "rule service name='ssh' family='ipv6' source address='::/0' log prefix='ssh' level='info' limit value='1/m' drop"
    permanent: true
    state: enabled
    # service: ssh
    zone: block
  tags:
  - firewalld

# remove any global ACCEPTS to ssh
- name: remove any global ACCEPTS to ssh
  firewalld:
    rich_rule: "rule service name='ssh' family='ipv4' source address='0.0.0.0/0' log prefix='ssh' level='info' limit value='1/m' drop"
    permanent: true
    zone: public
    # service: ssh
    state: disabled
  tags:
  - firewalld

# add rich rule for everyip in list
- name: add rich rule for everyip in list
  firewalld:
    rich_rule: "rule service name='ssh' family='ipv4' source address='{{item}}' log prefix='ssh' level='info' limit value='1/m' accept"
    permanent: true
    state: enabled
    zone: public
    # service: ssh
  with_items: "{{firewalld_ssh_ip_address_range}}"
  tags:
  - firewalld

  # # add drop rule for ipv6
  # firewalld_rich_rule 'ssh_add' do
  #   zone 'block'
  #   family 'ipv6'
  #   source_address '::/0'
  #   service_name 'ssh'
  #   log_prefix 'ssh'
  #   log_level 'info'
  #   limit_value '1/m'
  #   firewall_action 'drop'
  #   action :add
  # end

  # # remove any global ACCEPTS to ssh
  # firewalld_rich_rule 'ssh_remove' do
  #   zone 'public'
  #   family 'ipv4'
  #   source_address '0.0.0.0/0'
  #   service_name 'ssh'
  #   log_prefix 'ssh'
  #   log_level 'info'
  #   limit_value '1/m'
  #   firewall_action 'drop'
  #   action :remove
  # end

# - name: firewalld ssh
#   firewalld:
#     service: https
#     permanent: true
#     state: enabled

# - firewalld:
#     rich_rule: 'rule service name="ftp" audit limit value="1/m" accept'
#     permanent: true
#     state: enabled

# - name: 4949 (munin-node) is open to monitor(s)
#   when: install_muninnode|default(True)
#   command: firewall-cmd --permanent --zone=public --add-rich-rule='rule family="ipv4" source address="{{ item }}/32" port port=4949 protocol="tcp" accept'
#   with_items: muninnode_query_ips|default([])

- name: reloaded firewalld
  command: echo 'reloaded firewalld'
  notify: firewalld | policy | reloaded

- name: restarting firewalld
  command: echo 'restarting firewalld'
  notify: restart firewalld

# - name: Bounce firewalld
#   service: name=firewalld state=restarted
#   tags:
#   - firewalld

# - firewalld:
#     service: https
#     permanent: true
#     state: enabled

# - firewalld:
#     port: 8081/tcp
#     permanent: true
#     state: disabled

# - firewalld:
#     port: 161-162/udp
#     permanent: true
#     state: enabled

# - firewalld:
#     zone: public
#     service: http
#     permanent: true
#     state: enabled

# - firewalld:
#     rich_rule: 'rule service name="ftp" audit limit value="1/m" accept'
#     permanent: true
#     state: enabled

# - firewalld:
#     source: 192.0.2.0/24
#     zone: internal
#     state: enabled

# - firewalld:
#     zone: trusted
#     interface: eth2
#     permanent: true
#     state: enabled

# - firewalld:
#     masquerade: yes
#     state: enabled
#     permanent: true
#     zone: public
